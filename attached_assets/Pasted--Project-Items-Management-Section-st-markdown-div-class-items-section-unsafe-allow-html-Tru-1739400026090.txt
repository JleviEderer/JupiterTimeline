# Project Items Management Section
st.markdown("<div class='items-section'>", unsafe_allow_html=True)
st.markdown("## ðŸ“‹ Project Items Management")

# Get existing items
items_df = st.session_state.data_manager.get_project_items(project_data['ID'])

# Initialize column configuration
column_config = {
    "Team": st.column_config.SelectboxColumn(
        "Team",
        width="small",
        options=list(st.session_state.data_manager.get_team_colors().keys()),
        required=True,
        help="Team responsible for this item"
    ),
    "Item Name": st.column_config.TextColumn(
        "Item Name", 
        width="medium",
        required=True
    ),
    "Start Date": st.column_config.DateColumn(
        "Start Date", 
        width="small",
        required=True
    ),
    "End Date": st.column_config.DateColumn(
        "End Date", 
        width="small",
        required=True
    ),
    "Months": st.column_config.NumberColumn(
        "Months", 
        disabled=True, 
        width="small", 
        format="%d"
    )
}

# Initialize base DataFrame if empty
if items_df.empty:
    items_df = pd.DataFrame(columns=['Team', 'Item Name', 'Start Date', 'End Date', 'Months'])

# Calculate months before displaying
items_df['Months'] = items_df.apply(
    lambda x: max(1, ((pd.to_datetime(x['End Date']) - pd.to_datetime(x['Start Date'])).days // 30) + 1)
    if pd.notna(x['Start Date']) and pd.notna(x['End Date'])
    else 1,
    axis=1
)

# Get team colors and add custom CSS
team_colors = st.session_state.data_manager.get_team_colors()
st.markdown("""
    <style>
    [data-testid="stDataEditor"] td:first-child {
        font-weight: 500;
        color: white;
        text-align: center;
    }
    </style>
""", unsafe_allow_html=True)

# Display data editor
edited_df = st.data_editor(
    items_df[['Team', 'Item Name', 'Start Date', 'End Date', 'Months']],
    column_config=column_config,
    num_rows="dynamic",
    use_container_width=True,
    hide_index=True,
    key=f"items_editor_{selected_id}"
)

# Single save button and save logic
if st.button("Save Changes", key=f"save_items_{selected_id}"):
    if edited_df is not None:
        # Recalculate months
        edited_df['Months'] = edited_df.apply(
            lambda x: max(1, ((pd.to_datetime(x['End Date']) - pd.to_datetime(x['Start Date'])).days // 30) + 1)
            if pd.notna(x['Start Date']) and pd.notna(x['End Date'])
            else 1,
            axis=1
        )
        
        # Add required columns
        edited_df['Project ID'] = selected_id
        edited_df['Item ID'] = [f"I{i:03d}" for i in range(1, len(edited_df) + 1)]
        
        # Save changes
        st.session_state.data_manager.save_project_items(edited_df)
        st.success("Project items updated successfully!")
        st.rerun()

st.markdown("</div>", unsafe_allow_html=True)